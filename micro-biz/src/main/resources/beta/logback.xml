<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
	<!-- 此配置默认控制台打印配置 -->
	<!-- <include resource="org/springframework/boot/logging/logback/base.xml"/>  -->
	
    <property name="LOG_HOME" value="." />
    <!-- <property name="LOG_HOME" value="/home/work/credit_service/log" /> -->

    <property name="appName" value="sb-service"></property>
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
    		<encoder>
            <charset>UTF-8</charset>
	        <!--日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->  
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
        
        <file>${LOG_HOME}/${appName}.log</file>
        <!--当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        		TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动 
            		%i：当文件大小超过maxFileSize时，按照i进行文件滚动		-->
            <fileNamePattern>${LOG_HOME}/log/${appName}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <MaxHistory>365</MaxHistory>
            <MaxFileSize>300MB</MaxFileSize>  
        </rollingPolicy>
    </appender>
    
    <appender name="appErrorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        
        <file>${LOG_HOME}/error-${appName}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/log/error-${appName}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <MaxFileSize>100MB</MaxFileSize>  
            <MaxHistory>300</MaxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
            
    </appender>


	<!-- 在生产中若因为大量的日志导致IO过高，可以通过AsyncAppender进行异步的日志记录 -->
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
	<!-- <appender name="ASYNC_LOG" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref="FILE_LOG"/>
    </appender> -->

    <!-- 
    logger主要用于存放日志对象，也可以定义日志类型、级别
    name：表示匹配的logger类型前缀，也就是包的前半部分
    level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
    additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <logger name="org.apache.ibatis" level="info" />
    <logger name="logging.level.com.alibaba.dubbo.monitor" level="WARN" />
    <logger name="org.springframework" level="info" additivity="false"></logger>

	<!-- 日志和root的INFO重复打印 -->
    <!-- <logger name="com.weiyan" level="INFO" additivity="true">
        <appender-ref ref="appLogAppender" />
    </logger> -->

    <!-- 
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
    -->
    <root level="INFO">
        <appender-ref ref="stdout" />
        <appender-ref ref="appLogAppender" />
        <appender-ref ref="appErrorAppender" />
    </root>
</configuration> 